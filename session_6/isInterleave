class Solution:
	# @param A : string
	# @param B : string
	# @param C : string
	# @return an integer
	def isInterleave(self, A, B, C):
	    
	    m, n, p = map(len, [A, B, C])
	    
	    def helper(i, j, k, memo={}):
	        ''' Return sub-solution: 
	            is C[k:] is from by the interleaved of A[i:] and B[j:]
	        '''
	        if m-i + n-j != p-k:
	            # length mismatch
	            return False
	        
	        # Here for given (i, j), k is fixed and compatible
	        if i==m and j==n:
	            return True
	        if (i, j) in memo:
	            return memo[(i, j)]
	            
	        assert k<p     
	        res = (i != m and A[i] == C[k] and helper(i+1, j,   k+1)) or \
	              (j != n and B[j] == C[k] and helper(i,   j+1, k+1))
	        memo[(i,j)] = res
	        return res
	   
	    return int(helper(0,0,0))