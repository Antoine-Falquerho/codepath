# Definition for singly-linked list.
class ListNode
    attr_accessor :next,:data
    def initialize(data)
        @data = data
        @next=nil
    end
end

class Solution
    # @param a : head node of linked list
    # @return the head node in the linked list
    def insertionSortList(a)
        newList = nil
        
        pointer = a
        
        while pointer do

            if(!newList)
                newList = ListNode.new(pointer.data)
            else
                copy_newList = newList
                while copy_newList do
                    p copy_newList.data
                    p pointer.data
                    p copy_newList
                    # if(copy_newList.data > pointer.data)
                    #     new_node = ListNode.new(pointer.data)
                    #     temp = copy_newList
                    #     new_node.next = copy_newList.data
                    #     copy_newList.data = new_node                        
                    # end
                    if(copy_newList.data > pointer.data)
                        temp = copy_newList
                        copy_newList = ListNode.new(pointer.data)
                        copy_newList.next = temp
                        newList = copy_newList
                        p "add before"
                        p pointer.data
                        p copy_newList.data
                        # temp_data = copy_newList.data
                        # temp_next = copy_newList.next
                        # copy_newList = ListNode.new(pointer.data)
                        # copy_newList.next = temp_data
                    elsif !copy_newList.next
                        copy_newList.next = ListNode.new(pointer.data)
                        copy_newList = copy_newList.next

                    end
                    copy_newList = copy_newList.next
                end
            end
            # else
            #     second_p = newList
            #     p "1111"
            #     while(second_p) do
            #         p second_p
            #         if(pointer.data <= second_p.data)
            #             p "yes"
            #             c_pointer = second_p
                        
            #             second_p.data = pointer.data
            #             second_p.next = c_pointer
            #             p second_p.next.next.next

            #         elsif !second_p.next
            #             p "no"
            #             new_node = ListNode.new(pointer.data)
            #             second_p.next = new_node
            #             second_p = second_p.next 
            #         else
            #             p second_p.data
            #             p pointer.data
            #         end

            #        second_p = second_p.next 
            #     end
            # end
            pointer = pointer.next
        end
        return newList

    end
end


a = ListNode.new(2)
a.next = ListNode.new(3)
b = a.next
b.next = ListNode.new(1)
p_1 =  Solution.new.insertionSortList(a)

p "restuls -----"
while p_1 do
    p p_1.data
    p_1 = p_1.next
end
