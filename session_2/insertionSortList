require 'debugger'
# Definition for singly-linked list.
class ListNode
    attr_accessor :next,:data
    def initialize(data)
        @data = data
        @next=nil
    end
end

class Solution
    # @param a : head node of linked list
    # @return the head node in the linked list
    def insertionSortList(a)        
        pointer = ListNode.new(a.data)
        a = a.next
        
        while a do
            if(a.data < pointer.data) #add at beginning if less than the head
                old_first = pointer
                pointer = ListNode.new(a.data)
                pointer.next = old_first
            else

                i_previous = pointer
                i_pointer = pointer.next
                if(i_pointer == nil and i_previous == pointer) #if the pointer head                  
                    pointer.next = ListNode.new(a.data)

                elsif i_pointer == nil #if another el of pointer but not the head                    
                    i_previous.next = ListNode.new(a.data)
                else
                    while i_pointer do
                        if(a.data < i_pointer.data)
                            new_node = ListNode.new(a.data)
                            new_node.next = i_pointer
                            i_previous.next = new_node
                            break
                        elsif(i_pointer.next == nil)
                            new_node = ListNode.new(a.data)                            
                            i_pointer.next = new_node
                            break
                        end   
                        i_previous = i_pointer
                        i_pointer = i_pointer.next
                    end
                    
                end
            end
            a = a.next
        end
        return pointer

    end
end


a = ListNode.new(1)
b = ListNode.new(3)
c = ListNode.new(2)
d = ListNode.new(9)
e = ListNode.new(11)
f = ListNode.new(4)
g = ListNode.new(5)
h = ListNode.new(7)
i = ListNode.new(6)

a.next = nil
# b.next = c
# c.next = d
# d.next = e
# e.next = f
# f.next = g
# g.next = h
# h.next = i
# i.next = nil

p_1 =  Solution.new.insertionSortList(a)

p "restuls -----"
while p_1 do
    p p_1.data
    p_1 = p_1.next
end





            # else
            #     second_p = newList
            #     p "1111"
            #     while(second_p) do
            #         p second_p
            #         if(pointer.data <= second_p.data)
            #             p "yes"
            #             c_pointer = second_p
                        
            #             second_p.data = pointer.data
            #             second_p.next = c_pointer
            #             p second_p.next.next.next

            #         elsif !second_p.next
            #             p "no"
            #             new_node = ListNode.new(pointer.data)
            #             second_p.next = new_node
            #             second_p = second_p.next 
            #         else
            #             p second_p.data
            #             p pointer.data
            #         end

            #        second_p = second_p.next 
            #     end
            # end